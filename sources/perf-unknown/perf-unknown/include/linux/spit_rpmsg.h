/*
 * Copyright (C) 2016 Parrot S.A.
 *     Author: Aurelien Lefebvre <aurelien.lefebvre@parrot.com>
 *             Alexandre Dilly <alexandre.dilly@parrot.com>
 */

#ifndef _SPIT_RPMSG_H_
#define _SPIT_RPMSG_H_

#include "spit_defs.h"

/*
 * Stream rpmsg
 */
#define SPIT_RPMSG_STREAM_CHANNEL "spit"

enum spit_rpmsg_stream_type {
	/* Invalid message */
	SPIT_RPMSG_STREAM_TYPE_INVALID = 0,

	/* Request from Linux to ThreadX */
	SPIT_RPMSG_STREAM_TYPE_REQ = 0x1000,
	SPIT_RPMSG_STREAM_TYPE_REQ_GET_CAPABILITIES,
	SPIT_RPMSG_STREAM_TYPE_REQ_GET_MODE,
	SPIT_RPMSG_STREAM_TYPE_REQ_GET_MODE_FPS,
	SPIT_RPMSG_STREAM_TYPE_REQ_GET_FIFO_INFO,
	SPIT_RPMSG_STREAM_TYPE_REQ_GET_CONFIGURATION,
	SPIT_RPMSG_STREAM_TYPE_REQ_SET_CONFIGURATION,
	SPIT_RPMSG_STREAM_TYPE_REQ_START,
	SPIT_RPMSG_STREAM_TYPE_REQ_STOP,
	SPIT_RPMSG_STREAM_TYPE_REQ_CHANGE_BITRATE,
	SPIT_RPMSG_STREAM_TYPE_REQ_CHANGE_FRAMERATE,
	SPIT_RPMSG_STREAM_TYPE_REQ_FRAME_RELEASE,
	SPIT_RPMSG_STREAM_TYPE_REQ_FEED_FRAME,
	SPIT_RPMSG_STREAM_TYPE_REQ_KILL,
	SPIT_RPMSG_STREAM_TYPE_REQ_LAST,

	/* Response from ThreadX to Linux */
	SPIT_RPMSG_STREAM_TYPE_RESP = 0x2000,
	SPIT_RPMSG_STREAM_TYPE_RESP_GET_CAPABILITIES,
	SPIT_RPMSG_STREAM_TYPE_RESP_GET_MODE,
	SPIT_RPMSG_STREAM_TYPE_RESP_GET_MODE_FPS,
	SPIT_RPMSG_STREAM_TYPE_RESP_GET_FIFO_INFO,
	SPIT_RPMSG_STREAM_TYPE_RESP_GET_CONFIGURATION,
	SPIT_RPMSG_STREAM_TYPE_RESP_SET_CONFIGURATION,
	SPIT_RPMSG_STREAM_TYPE_RESP_START,
	SPIT_RPMSG_STREAM_TYPE_RESP_STOP,
	SPIT_RPMSG_STREAM_TYPE_RESP_CHANGE_BITRATE,
	SPIT_RPMSG_STREAM_TYPE_RESP_CHANGE_FRAMERATE,
	SPIT_RPMSG_STREAM_TYPE_RESP_FRAME_RELEASE,
	SPIT_RPMSG_STREAM_TYPE_RESP_FEED_FRAME,
	SPIT_RPMSG_STREAM_TYPE_RESP_KILL,
	SPIT_RPMSG_STREAM_TYPE_RESP_LAST,

	/* Events from ThreadX to Linux */
	SPIT_RPMSG_STREAM_TYPE_EVT = 0x3000,
	SPIT_RPMSG_STREAM_TYPE_EVT_FRAME,
	SPIT_RPMSG_STREAM_TYPE_EVT_INPUT_STATUS,
	SPIT_RPMSG_STREAM_TYPE_EVT_LAST,

	SPIT_RPMSG_STREAM_TYPE_FORCE_ENUM = 0xffffffff,
};

/* Helper for request / response / event handling */
#define SPIT_RPMSG_STREAM_IS_REQ(type) \
	(type > SPIT_RPMSG_STREAM_TYPE_REQ && \
	 type < SPIT_RPMSG_STREAM_TYPE_REQ_LAST)
#define SPIT_RPMSG_STREAM_IS_RESP(type) \
	(type > SPIT_RPMSG_STREAM_TYPE_RESP && \
	 type < SPIT_RPMSG_STREAM_TYPE_RESP_LAST)
#define SPIT_RPMSG_STREAM_IS_EVT(type) \
	(type > SPIT_RPMSG_STREAM_TYPE_EVT && \
	 type < SPIT_RPMSG_STREAM_TYPE_EVT_LAST)

#define SPIT_RPMSG_STREAM_TYPE_REQ_COUNT \
	(SPIT_RPMSG_STREAM_TYPE_REQ_LAST - SPIT_RPMSG_STREAM_TYPE_REQ - 1)
#define SPIT_RPMSG_STREAM_TYPE_RESP_COUNT \
	(SPIT_RPMSG_STREAM_TYPE_RESP_LAST - SPIT_RPMSG_STREAM_TYPE_RESP - 1)
#define SPIT_RPMSG_STREAM_TYPE_EVT_COUNT \
	(SPIT_RPMSG_STREAM_TYPE_EVT_LAST - SPIT_RPMSG_STREAM_TYPE_EVT - 1)

#define SPIT_RPMSG_STREAM_REQ_IDX(req_type) \
	(req_type - SPIT_RPMSG_STREAM_TYPE_REQ - 1)
#define SPIT_RPMSG_STREAM_RESP_IDX(resp_type) \
	(resp_type - SPIT_RPMSG_STREAM_TYPE_RESP - 1)
#define SPIT_RPMSG_STREAM_EVT_IDX(event_type) \
	(event_type - SPIT_RPMSG_STREAM_TYPE_EVT - 1)

#define SPIT_RPMSG_STREAM_REQ_TO_RESP(req_type) \
	(req_type + 0x1000)
#define SPIT_RPMSG_STREAM_RESP_TO_REQ(resp_type) \
	(resp_type - 0x1000)

struct spit_rpmsg_stream {
	enum spit_rpmsg_stream_type type;
	enum spit_stream stream;
	enum spit_error error;
	union {
		unsigned char data[0];
		/* REQ/RESP_GET_CAPABILITIES */
		struct spit_stream_caps caps;
		/* REQ/RESP_GET_MODE */
		struct spit_mode mode;
		/* REQ/RESP_GET_MODE_FPS */
		struct spit_mode_fps mode_fps;
		/* REQ/RESP_CONFIGURE */
		struct spit_stream_conf conf;
		/* REQ/RESP_GET_FIFO_INFO */
		struct spit_buffer_fifo_info fifo_info;
		/* REQ/RESP_START / STOP */
		enum spit_frame_types frame_types;
		/* REQ/RESP_CHANGE_BITRATE */
		struct spit_bitrate_change bitrate_change;
		/* REQ/RESP_CHANGE_FRAMERATE */
		struct spit_fps framerate_change;
		/* REQ/RESP_FRAME_RELEASE / FEED_FRAME | EVT_FRAME */
		struct spit_frame_desc frame_desc;
		/* EVT_INPUT_STATUS */
		struct spit_input_status input_status;
	};
};

/*
 * Control rpmsg
 */
#define SPIT_RPMSG_CONTROL_CHANNEL "spit_ctrl"

enum spit_rpmsg_control_type {
	/* Invalid message */
	SPIT_RPMSG_CONTROL_TYPE_INVALID = 0,

	/* Request from Linux to ThreadX */
	SPIT_RPMSG_CONTROL_TYPE_REQ = 0x1000,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_CAPABILITIES,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_MODE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_MODE_FPS,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_DSP_MODE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_DSP_MODE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_CONFIGURATION,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_CONFIGURATION,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_AE_INFO,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_AE_INFO,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_AE_EV,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_AE_EV,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_AWB_INFO,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_AWB_INFO,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_IMAGE_SETTINGS,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_IMAGE_SETTINGS,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_FLICKER_MODE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_FLICKER_MODE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_DEWARP_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_DEWARP_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_DEWARP_FOV,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_DEWARP_FOV,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_BRACKETING_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_BRACKETING_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_BURST_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_BURST_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_IMAGE_STYLE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_SET_IMAGE_STYLE,
	SPIT_RPMSG_CONTROL_TYPE_REQ_GET_LENS_SHADING,
	SPIT_RPMSG_CONTROL_TYPE_REQ_LAST,

	/* Response from ThreadX to Linux */
	SPIT_RPMSG_CONTROL_TYPE_RESP = 0x2000,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_CAPABILITIES,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_MODE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_MODE_FPS,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_DSP_MODE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_DSP_MODE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_CONFIGURATION,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_CONFIGURATION,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_AE_INFO,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_AE_INFO,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_AE_EV,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_AE_EV,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_AWB_INFO,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_AWB_INFO,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_IMAGE_SETTINGS,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_IMAGE_SETTINGS,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_FLICKER_MODE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_FLICKER_MODE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_DEWARP_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_DEWARP_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_DEWARP_FOV,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_DEWARP_FOV,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_BRACKETING_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_BRACKETING_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_BURST_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_BURST_CONFIG,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_IMAGE_STYLE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_SET_IMAGE_STYLE,
	SPIT_RPMSG_CONTROL_TYPE_RESP_GET_LENS_SHADING,
	SPIT_RPMSG_CONTROL_TYPE_RESP_LAST,

	/* Events from ThreadX to Linux */
	SPIT_RPMSG_CONTROL_TYPE_EVT = 0x3000,
	SPIT_RPMSG_CONTROL_TYPE_EVT_STATUS,
	SPIT_RPMSG_CONTROL_TYPE_EVT_LAST,

	SPIT_RPMSG_CONTROL_TYPE_FORCE_ENUM = 0xffffffff,
};

/* Helper for request / response */
#define SPIT_RPMSG_CONTROL_IS_REQ(type) \
	(type > SPIT_RPMSG_CONTROL_TYPE_REQ && \
	 type < SPIT_RPMSG_CONTROL_TYPE_REQ_LAST)
#define SPIT_RPMSG_CONTROL_IS_RESP(type) \
	(type > SPIT_RPMSG_CONTROL_TYPE_RESP && \
	 type < SPIT_RPMSG_CONTROL_TYPE_RESP_LAST)

#define SPIT_RPMSG_CONTROL_TYPE_REQ_COUNT \
	(SPIT_RPMSG_CONTROL_TYPE_REQ_LAST - SPIT_RPMSG_CONTROL_TYPE_REQ - 1)
#define SPIT_RPMSG_CONTROL_TYPE_RESP_COUNT \
	(SPIT_RPMSG_CONTROL_TYPE_RESP_LAST - SPIT_RPMSG_CONTROL_TYPE_RESP - 1)

#define SPIT_RPMSG_CONTROL_REQ_IDX(req_type) \
	(req_type - SPIT_RPMSG_CONTROL_TYPE_REQ - 1)
#define SPIT_RPMSG_CONTROL_RESP_IDX(resp_type) \
	(resp_type - SPIT_RPMSG_CONTROL_TYPE_RESP - 1)

#define SPIT_RPMSG_CONTROL_REQ_TO_RESP(req_type) \
	(req_type + 0x1000)
#define SPIT_RPMSG_CONTROL_RESP_TO_REQ(resp_type) \
	(resp_type - 0x1000)

struct spit_rpmsg_control {
	enum spit_rpmsg_control_type type;
	enum spit_control control;
	enum spit_error error;
	union {
		unsigned char data[0];
		/* REQ/RESP_GET_CAPABILITIES */
		struct spit_control_caps caps;
		/* REQ/RESP_GET_MODE */
		struct spit_mode mode;
		/* REQ/RESP_GET_MODE_FPS */
		struct spit_mode_fps mode_fps;
		/* REQ/RESP_GET_DSP_MODE / REQ/RESP_SET_DSP_MODE */
		enum spit_dsp_mode dsp_mode;
		/* REQ/RESP_GET_CONFIGURATION / REQ/RESP_SET_CONFIGURATION */
		struct spit_control_conf conf;
		/* REQ/RESP_GET_AE_INFO / REQ/RESP_SET_AE_INFO */
		struct spit_ae_info ae_info;
		/* REQ/RESP_GET_AE_EV / REQ/RESP_SET_AE_EV */
		struct spit_ae_ev ae_ev;
		/* REQ/RESP_GET_AWB_INFO / REQ/RESP_SET_AWB_INFO */
		struct spit_awb_info awb_info;
		/* REQ/RESP_GET_IMAGE_STYLE / REQ/RESP_SET_IMAGE_STYLE */
		enum spit_img_style img_style;
		/* REQ/RESP_GET_IMAGE_SETTINGS / REQ/RESP_SET_IMAGE_SETTINGS */
		struct spit_img_settings img_settings;
		/* REQ/RESP_GET_FLICKER_MODE / REQ/RESP_SET_FLICKER_MODE */
		enum spit_flicker_mode flicker_mode;
		/* REQ/RESP_GET_DEWARP_CONFIG / REQ/RESP_SET_DEWARP_CONFIG */
		struct spit_dewarp_cfg dewarp_cfg;
		/* REQ/RESP_GET_DEWARP_FOV / REQ/RESP_SET_DEWARP_FOV */
		uint32_t dewarp_fov;
		/* REQ/RESP_GET_BRACKETING_CONFIG /
		 * REQ/RESP_SET_BRACKETING_CONFIG
		 */
		struct spit_bracketing_cfg bracketing_cfg;
		/* REQ/RESP_GET_BURST_CONFIG / REQ/RESP_SET_BURST_CONFIG */
		struct spit_burst_cfg burst_cfg;
		/* REQ/RESP_GET_LENS_SHADING */
		struct spit_lens_shading_maps lens_shading_maps;
		/* EVT_STATUS */
		enum spit_control_status status;
	};
};

#endif /* _SPIT_RPMSG_H_ */
